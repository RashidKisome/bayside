{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\n\nfunction Index(_ref) {\n  var stars = _ref.stars;\n  return __jsx(\"div\", null, \"Next stars: \", blogs.map(function (item) {\n    {\n      item.title;\n    }\n  }));\n}\n\nIndex.getInitialProps = function _callee(ctx) {\n  var fs, blogs, files, filesNames;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fs = require('fs');\n          blogs = [];\n          files = fs.readdirSync(\"./data\", {\n            withFileTypes: true\n          });\n          filesNames = files.filter(function (files) {\n            return !files.isDirectory();\n          }).map(function (files) {\n            return files.name;\n          });\n          filesNames.forEach(function (file) {\n            var blog = {};\n            var data = fs.readFileSync(\"./data/\" + file).toString();\n            data = data.split(\"|\");\n            blog.title = data[0];\n            blogs.push(blog);\n          });\n          return _context.abrupt(\"return\", {\n            blogs: blogs\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["c:/projects/blogging_platform/pages/index.js"],"names":["fetch","Index","stars","blogs","map","item","title","getInitialProps","ctx","fs","require","files","readdirSync","withFileTypes","filesNames","filter","isDirectory","name","forEach","file","blog","data","readFileSync","toString","split","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,SAASC,KAAT,OAA0B;AAAA,MAATC,KAAS,QAATA,KAAS;AACxB,SAAO,mCAAkBC,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD,EAAU;AAC3C;AAACA,MAAAA,IAAI,CAACC,KAAL;AAAW;AACb,GAFwB,CAAlB,CAAP;AAGD;;AAEDL,KAAK,CAACM,eAAN,GAAwB,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,UAAAA,EADgB,GACXC,OAAO,CAAC,IAAD,CADI;AAElBP,UAAAA,KAFkB,GAEV,EAFU;AAIlBQ,UAAAA,KAJkB,GAIVF,EAAE,CAACG,WAAH,CAAe,QAAf,EAAyB;AAAEC,YAAAA,aAAa,EAAE;AAAjB,WAAzB,CAJU;AAKhBC,UAAAA,UALgB,GAKHH,KAAK,CACrBI,MADgB,CACT,UAAAJ,KAAK;AAAA,mBAAI,CAACA,KAAK,CAACK,WAAN,EAAL;AAAA,WADI,EAEhBZ,GAFgB,CAEZ,UAAAO,KAAK;AAAA,mBAAIA,KAAK,CAACM,IAAV;AAAA,WAFO,CALG;AAStBH,UAAAA,UAAU,CAACI,OAAX,CAAmB,UAAAC,IAAI,EAAI;AACzB,gBAAIC,IAAI,GAAG,EAAX;AACA,gBAAIC,IAAI,GAAGZ,EAAE,CAACa,YAAH,CAAgB,YAAYH,IAA5B,EAAkCI,QAAlC,EAAX;AACAF,YAAAA,IAAI,GAAGA,IAAI,CAACG,KAAL,CAAW,GAAX,CAAP;AACAJ,YAAAA,IAAI,CAACd,KAAL,GAAae,IAAI,CAAC,CAAD,CAAjB;AACAlB,YAAAA,KAAK,CAACsB,IAAN,CAAWL,IAAX;AACD,WAND;AATsB,2CAiBf;AAAEjB,YAAAA,KAAK,EAAEA;AAAT,WAjBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAoBA,eAAeF,KAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\n\r\nfunction Index({ stars }) {\r\n  return <div>Next stars: {blogs.map((item) => {\r\n    {item.title}\r\n  })}</div>\r\n}\r\n\r\nIndex.getInitialProps = async ctx => {\r\n  const fs = require('fs');\r\n  let blogs = [];\r\n\r\n  let files = fs.readdirSync(\"./data\", { withFileTypes: true });\r\n  const filesNames = files\r\n    .filter(files => !files.isDirectory())\r\n    .map(files => files.name);\r\n\r\n  filesNames.forEach(file => {\r\n    let blog = {};\r\n    let data = fs.readFileSync(\"./data/\" + file).toString();\r\n    data = data.split(\"|\");\r\n    blog.title = data[0];\r\n    blogs.push(blog);\r\n  });\r\n\r\n  return { blogs: blogs }\r\n}\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}