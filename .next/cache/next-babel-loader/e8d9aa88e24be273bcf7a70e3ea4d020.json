{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\n\nfunction Index(_ref) {\n  var stars = _ref.stars;\n  return __jsx(\"div\", null, \"Next stars: \", stars);\n}\n\nIndex.getInitialProps = function _callee(ctx) {\n  var fs, readFiles, blogs, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fs = require('fs');\n\n          readFiles = function readFiles(dirname, onFileContent, onError) {\n            fs.readdir(dirname, function (err, filenames) {\n              if (err) {\n                onError(err);\n                return;\n              }\n\n              filenames.forEach(function (filename) {\n                fs.readFile(dirname + filename, 'utf-8', function (err, content) {\n                  if (err) {\n                    onError(err);\n                    return;\n                  }\n\n                  onFileContent(filename, content);\n                });\n              });\n            });\n          };\n\n          blogs = [];\n          data = {};\n          readFiles('dirname/', function (filename, content) {\n            var data = content.toString().split(\"|\");\n          }, function (err) {\n            throw err;\n          });\n          return _context.abrupt(\"return\", {\n            stars: data[0]\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["c:/projects/blogging_platform/pages/index.js"],"names":["fetch","Index","stars","getInitialProps","ctx","fs","require","readFiles","dirname","onFileContent","onError","readdir","err","filenames","forEach","filename","readFile","content","blogs","data","toString","split"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,SAASC,KAAT,OAA0B;AAAA,MAATC,KAAS,QAATA,KAAS;AACxB,SAAO,mCAAkBA,KAAlB,CAAP;AACD;;AAEDD,KAAK,CAACE,eAAN,GAAwB,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,UAAAA,EADgB,GACXC,OAAO,CAAC,IAAD,CADI;;AAGlBC,UAAAA,SAHkB,GAGN,SAAZA,SAAY,CAACC,OAAD,EAAUC,aAAV,EAAyBC,OAAzB,EAAqC;AACnDL,YAAAA,EAAE,CAACM,OAAH,CAAWH,OAAX,EAAoB,UAASI,GAAT,EAAcC,SAAd,EAAyB;AAC3C,kBAAID,GAAJ,EAAS;AACPF,gBAAAA,OAAO,CAACE,GAAD,CAAP;AACA;AACD;;AACDC,cAAAA,SAAS,CAACC,OAAV,CAAkB,UAASC,QAAT,EAAmB;AACnCV,gBAAAA,EAAE,CAACW,QAAH,CAAYR,OAAO,GAAGO,QAAtB,EAAgC,OAAhC,EAAyC,UAASH,GAAT,EAAcK,OAAd,EAAuB;AAC9D,sBAAIL,GAAJ,EAAS;AACPF,oBAAAA,OAAO,CAACE,GAAD,CAAP;AACA;AACD;;AACDH,kBAAAA,aAAa,CAACM,QAAD,EAAWE,OAAX,CAAb;AACD,iBAND;AAOD,eARD;AASD,aAdD;AAeD,WAnBqB;;AAqBlBC,UAAAA,KArBkB,GAqBV,EArBU;AAuBlBC,UAAAA,IAvBkB,GAuBX,EAvBW;AAwBtBZ,UAAAA,SAAS,CAAC,UAAD,EAAa,UAASQ,QAAT,EAAmBE,OAAnB,EAA4B;AAChD,gBAAME,IAAI,GAAGF,OAAO,CAACG,QAAR,GAAmBC,KAAnB,CAAyB,GAAzB,CAAb;AACD,WAFQ,EAEN,UAAST,GAAT,EAAc;AACf,kBAAMA,GAAN;AACD,WAJQ,CAAT;AAxBsB,2CA6Bf;AAAEV,YAAAA,KAAK,EAAEiB,IAAI,CAAC,CAAD;AAAb,WA7Be;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAgCA,eAAelB,KAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\n\r\nfunction Index({ stars }) {\r\n  return <div>Next stars: {stars}</div>\r\n}\r\n\r\nIndex.getInitialProps = async ctx => {\r\n  const fs = require('fs');\r\n  \r\n  let readFiles = (dirname, onFileContent, onError) => {\r\n    fs.readdir(dirname, function(err, filenames) {\r\n      if (err) {\r\n        onError(err);\r\n        return;\r\n      }\r\n      filenames.forEach(function(filename) {\r\n        fs.readFile(dirname + filename, 'utf-8', function(err, content) {\r\n          if (err) {\r\n            onError(err);\r\n            return;\r\n          }\r\n          onFileContent(filename, content);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  let blogs = [];\r\n  \r\n  var data = {};\r\n  readFiles('dirname/', function(filename, content) {\r\n    const data = content.toString().split(\"|\");\r\n  }, function(err) {\r\n    throw err;\r\n  });\r\n  return { stars: data[0] }\r\n}\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}